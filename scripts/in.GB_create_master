# DESCRIPTION:
# - This file will generate numerous input files for LAMMPS using a large number of grain boundaries 
# - This file works for symmetric tilt and twist grain boundaries  
# - This file needs to modify periodic distance solver for asymmetric or mixed tilt-twist (general) GBs
#
# VARIABLES PASSED IN THROUGH COMMAND LINE
# variable gbname == directory name
#
# SYNTAX:
# lmp_executable < in.GB_create_master
#
# ROUTINES REQUIRED
# 100STGB_210.txt, GB_potential.txt, in.find_minimum.txt, GB_minimize.txt, GB_params.txt, GB_params_material.txt 
# ----------
# 100STGB_210.txt == a file that contains the crystal orientations of the two lattices
# GB_potential.txt == the potential file
# in.find_minimum.txt == find lattice constant, energy of minimum energy fcc/bcc structure (checks for fcc/bcc)
# GB_params.txt == extra parameters for minimization, GB distances, etc.
# GB_params_material.txt == material parameters, periodic distances, translations, overlap distances, etc.
#################################################################

variable gbname index STGB_210 #should be selected by user

variable path index GB_projects
variable pot_path index potentials
variable home index scripts
variable 0K_structures index 0K_structures

shell mkdir ../${path}/${gbname}/logs
log ../${path}/${gbname}/logs/GB_create_master.log

include minimization_params.txt
include ../${path}/${gbname}/input.txt #can overrite minimization_params.txt
print " "
print "%%%%%%%%%%%%%%%%%%%%%%%%%"
print "----------input----------"
shell cat ../${gbpath}/input.txt
print " "
print "%%%%%%%%%%%%%%%%%%%%%%%%%"
print " "

variable potname index ${potname_pure}
variable oriname index ../${path}/${gbname}/orientation.txt

# Extra variables (added for ATGBs)
# If these are changed to positive in the orientation file, then periodic distance can be manually inserted
variable xlen2 equal -1
variable zlen2 equal -1

# Find lattice parameter, cohesive energy, etc.
include in.find_minimum.txt
include ${oriname}
include minimization_params.txt
include find_minimum_GB_supercell.txt

# For debug 
#variable xinc equal 1
#variable zinc equal 1 
#variable overlapinc equal 1
 
# ---------- Define loops for simulation ---------------------  
label loopa 
variable a loop ${xinc} 
variable tx equal "(v_a-1) / v_xinc * v_xsize" 
label loopb 
variable b loop ${zinc} 
variable tz equal "(v_b-1) / v_zinc * v_zsize" 
label loopd 
variable d loop ${overlapboth} 
label loopc 
variable c loop ${overlapinc} 
variable overlapdist equal "v_overlapstart + v_overlapmove * (v_c-1)" 
print "Overlap Distance: ${overlapdist}"
 
# ---------- Calculate counter and create data directory --------------------- 
variable ctemp equal ${counter}+1 
variable counter equal ${ctemp} 
variable ctemp delete 
print "Counter: ${counter}" 

# ---------- Initialize Simulation --------------------- 
clear 
units metal 
dimension 3 
boundary p p p 
atom_style atomic
atom_modify map array

# ---------- Create Atomistic Structure --------------------- 
lattice ${lattype} ${latparam} 
region whole block 0.000000 ${xlen} ${ylen2} ${ylen1} 0.000000 ${zlen} units box 
create_box 2 whole 
region upper block INF INF -0.01 ${ylen1} INF INF units box 
lattice ${lattype} ${latparam} orient x ${x11} ${x12} ${x13} orient y ${y11} ${y12} ${y13} orient z ${z11} ${z12} ${z13} 
create_atoms 1 region upper 
region lower block INF INF ${ylen2} 0.01 INF INF units box 
lattice ${lattype} ${latparam} orient x ${x21} ${x22} ${x23} orient y ${y21} ${y22} ${y23} orient z ${z21} ${z22} ${z23} 
create_atoms 2 region lower 
group upper type 1 
group lower type 2 

shell cd ../${pot_path}
include ${potname}
shell cd ../${home}

# ---------- Displace atoms and delete overlapping atoms --------------------- 
displace_atoms upper move ${tx} 0 ${tz} units lattice 
if "$d == 1" then "delete_atoms overlap ${overlapdist} lower upper" 
if "$d == 2" then "delete_atoms overlap ${overlapdist} upper lower" 
if "$c == 1" then "variable atomprev equal 1" 
variable natoms equal "count(all)" 
print "Previous: ${atomprev}, Present: ${natoms}" 
if "${atomprev} == ${natoms}" then "jump in.GB_create_master loopend" 

include GB_minimize.txt
 
# ---------- Write datafile into GB Directory ------------- 
shell mkdir ../${path}/${gbname}/${0K_structures} 
shell cd ../${path}/${gbname}/${0K_structures} 
write_data GB_E${gbernd}_N${natoms}_count${counter}.dat
shell cd ../../../${home} 
 
# ---------- End of loop structure ------------- 
label loopend 
next c 
jump in.GB_create_master loopc 
variable c delete 
next d 
jump in.GB_create_master loopd 
variable d delete 
next b 
jump in.GB_create_master loopb 
variable b delete 
next a 
jump in.GB_create_master loopa 

shell rm log.lammps
print "All done"
